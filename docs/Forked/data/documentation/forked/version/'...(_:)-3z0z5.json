{"sections":[],"metadata":{"role":"symbol","symbolKind":"op","extendedModule":"Swift","externalID":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","title":"...(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeFrom","kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeFromV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"modules":[{"name":"Forked","relatedModules":["Swift"]}],"roleHeading":"Operator"},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Returns a partial range extending upward from a lower bound."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/version\/'...(_:)-3z0z5"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"minimum","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeFrom","kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The lower bound for the range.","type":"text"}]}],"name":"minimum"}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"Use the postfix range operator (postfix "},{"type":"codeVoice","code":"..."},{"text":") to create a partial range","type":"text"},{"type":"text","text":" "},{"text":"of any type that conforms to the ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":" protocol. This example","type":"text"},{"text":" ","type":"text"},{"text":"creates a ","type":"text"},{"type":"codeVoice","code":"PartialRangeFrom<Double>"},{"text":" instance that includes any value","type":"text"},{"text":" ","type":"text"},{"text":"greater than or equal to ","type":"text"},{"type":"codeVoice","code":"5.0"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let atLeastFive = 5.0...","","atLeastFive.contains(4.0)     \/\/ false","atLeastFive.contains(5.0)     \/\/ true","atLeastFive.contains(6.0)     \/\/ true"]},{"inlineContent":[{"text":"You can use this type of partial range of a collection’s indices to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represent the range from the partial range’s lower bound up to the end"},{"type":"text","text":" "},{"text":"of the collection.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[3...])","\/\/ Prints \"[40, 50, 60, 70]\""]},{"type":"aside","name":"Precondition","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"minimum","type":"codeVoice"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5"},"references":{"doc://Forked/documentation/Forked/Version/...(_:)-3z0z5":{"type":"topic","kind":"symbol","title":"...(_:)","role":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5","url":"\/documentation\/forked\/version\/'...(_:)-3z0z5","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"..."},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a partial range extending upward from a lower bound."}]},"doc://Forked/documentation/Forked/Version":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","title":"Version","type":"topic","role":"symbol","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Version"}],"url":"\/documentation\/forked\/version","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Version","kind":"identifier"}],"kind":"symbol"},"doc://Forked/documentation/Forked":{"identifier":"doc:\/\/Forked\/documentation\/Forked","title":"Forked","type":"topic","role":"collection","abstract":[{"text":"A framework for handling shared data with confidence in Swift.","type":"text"}],"url":"\/documentation\/forked","kind":"symbol"},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","title":"Comparable Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/forked\/version\/comparable-implementations","type":"topic","kind":"article"}}}