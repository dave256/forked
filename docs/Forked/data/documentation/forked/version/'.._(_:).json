{"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"paths":["\/documentation\/forked\/version\/'.._(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"abstract":[{"text":"Returns a partial range up to, but not including, its upper bound.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"..<"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"maximum","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"PartialRangeUpTo","kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeUpToV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"maximum","content":[{"type":"paragraph","inlineContent":[{"text":"The upper bound for the range.","type":"text"}]}]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use the prefix half-open range operator (prefix "},{"code":"..<","type":"codeVoice"},{"text":") to create a","type":"text"},{"type":"text","text":" "},{"text":"partial range of any type that conforms to the ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This example creates a "},{"type":"codeVoice","code":"PartialRangeUpTo<Double>"},{"type":"text","text":" instance that includes"},{"text":" ","type":"text"},{"text":"any value less than ","type":"text"},{"code":"5.0","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let upToFive = ..<5.0","","upToFive.contains(3.14)       \/\/ true","upToFive.contains(6.28)       \/\/ false","upToFive.contains(5.0)        \/\/ false"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can use this type of partial range of a collection’s indices to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"represent the range from the start of the collection up to, but not"},{"text":" ","type":"text"},{"text":"including, the partial range’s upper bound.","type":"text"}]},{"syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[..<3])","\/\/ Prints \"[10, 20, 30]\""],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"maximum"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}]}],"style":"note","type":"aside","name":"Precondition"}]}],"kind":"symbol","metadata":{"extendedModule":"Swift","role":"symbol","modules":[{"relatedModules":["Swift"],"name":"Forked"}],"title":"..<(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"..<","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s16PartialRangeUpToV","text":"PartialRangeUpTo","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"externalID":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","symbolKind":"op","roleHeading":"Operator"},"sections":[],"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)","interfaceLanguage":"swift"},"references":{"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","title":"Comparable Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/forked\/version\/comparable-implementations","type":"topic","kind":"article"},"doc://Forked/documentation/Forked/Version":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","title":"Version","type":"topic","role":"symbol","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Version"}],"url":"\/documentation\/forked\/version","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Version","kind":"identifier"}],"kind":"symbol"},"doc://Forked/documentation/Forked/Version/.._(_:)":{"role":"symbol","type":"topic","abstract":[{"text":"Returns a partial range up to, but not including, its upper bound.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"..<","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s16PartialRangeUpToV","text":"PartialRangeUpTo","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)","url":"\/documentation\/forked\/version\/'.._(_:)","title":"..<(_:)"},"doc://Forked/documentation/Forked":{"identifier":"doc:\/\/Forked\/documentation\/Forked","title":"Forked","type":"topic","role":"collection","abstract":[{"text":"A framework for handling shared data with confidence in Swift.","type":"text"}],"url":"\/documentation\/forked","kind":"symbol"}}}