{"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"other","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]}],"kind":"declarations"}],"variants":[{"paths":["\/documentation\/forked\/mergeable\/salvaging(from:)-3p5f"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Mergeable","doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-9fs2y"]]},"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-3p5f","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"metadata":{"extendedModule":"Forked","roleHeading":"Instance Method","modules":[{"name":"Forked"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"salvaging","kind":"identifier"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"symbolKind":"method","externalID":"s:6Forked9MergeablePAAE9salvaging4fromxx_tKF","title":"salvaging(from:)"},"references":{"doc://Forked/documentation/Forked/Mergeable":{"kind":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable","abstract":[{"type":"text","text":"Any type conforming to this can be used in a 3-way merge"}],"type":"topic","navigatorTitle":[{"text":"Mergeable","kind":"identifier"}],"url":"\/documentation\/forked\/mergeable","title":"Mergeable","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Mergeable","kind":"identifier"}]},"doc://Forked/documentation/Forked/Mergeable/salvaging(from:)-3p5f":{"title":"salvaging(from:)","kind":"symbol","type":"topic","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"salvaging","kind":"identifier"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-3p5f","url":"\/documentation\/forked\/mergeable\/salvaging(from:)-3p5f","role":"symbol"},"doc://Forked/documentation/Forked":{"title":"Forked","type":"topic","kind":"symbol","url":"\/documentation\/forked","abstract":[{"type":"text","text":"A framework for handling shared data with confidence in Swift."}],"role":"collection","identifier":"doc:\/\/Forked\/documentation\/Forked"},"doc://Forked/documentation/Forked/Mergeable/salvaging(from:)-9fs2y":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-9fs2y","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"defaultImplementations":1,"required":true,"title":"salvaging(from:)","type":"topic","url":"\/documentation\/forked\/mergeable\/salvaging(from:)-9fs2y","abstract":[{"type":"text","text":"In general, 3-way merges are used in Forked. But when bootstrapping,"},{"text":" ","type":"text"},{"text":"there can be times when no common ancestor exists. Effectively we have","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to merge together unrelated values. For example, if you install an app on"},{"text":" ","type":"text"},{"text":"two offline devices, insert some data on each, and then take them online to","type":"text"},{"text":" ","type":"text"},{"text":"sync. In this scenario, there is no common ancestor,","type":"text"},{"type":"text","text":" "},{"text":"but it would be nice to keep the data entered on each device.","type":"text"},{"text":" ","type":"text"},{"text":"An even trickier case arises if two devices are fully synced up, but then the","type":"text"},{"type":"text","text":" "},{"text":"cloud data is reset. Effectively, the two data sets are now unrelated, and if you","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"start them syncing again, the history relating them is lost, and there is no common"},{"type":"text","text":" "},{"type":"text","text":"ancestor. You can choose one or the other, but just blindly merging the two will"},{"type":"text","text":" "},{"type":"text","text":"lead to duplications (how often have we seen that in apps like Contacts?)"}]}}}