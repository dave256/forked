{"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Mergeable"]]},"metadata":{"roleHeading":"Instance Method","modules":[{"name":"Forked"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"symbolKind":"method","title":"salvaging(from:)","externalID":"s:6Forked9MergeableP9salvaging4fromxx_tKF","required":true},"defaultImplementationsSections":[{"anchor":"Mergeable-Implementations","title":"Mergeable Implementations","identifiers":["doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-3p5f"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"other"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s a lot of introduction, but it sets up this function. This function is effectively"},{"text":" ","type":"text"},{"type":"text","text":"a 2-way merge. By default, it just returns "},{"type":"codeVoice","code":"self"},{"type":"text","text":", which is considered the dominant"},{"type":"text","text":" "},{"text":"copy of the data. But if you need special handling to bootstrap, you can “salvage”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"data from "},{"type":"codeVoice","code":"other"},{"text":" and merge it in. It is even possible to setup a 3-way merge","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"where you construct an initial value and use that as the common ancestor, but"},{"text":" ","type":"text"},{"type":"text","text":"this may not work well for all properties. Often a combination of approaches is best"},{"type":"text","text":" "},{"type":"text","text":"for salvaging, eg, starting with a 3-way merge against the initial value, and then"},{"text":" ","type":"text"},{"text":"copying in properties from ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" where this 3-way merge doesn’t do what you"},{"text":" ","type":"text"},{"type":"text","text":"want."}]}],"kind":"content"}],"abstract":[{"type":"text","text":"In general, 3-way merges are used in Forked. But when bootstrapping,"},{"text":" ","type":"text"},{"type":"text","text":"there can be times when no common ancestor exists. Effectively we have"},{"type":"text","text":" "},{"text":"to merge together unrelated values. For example, if you install an app on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"two offline devices, insert some data on each, and then take them online to"},{"text":" ","type":"text"},{"text":"sync. In this scenario, there is no common ancestor,","type":"text"},{"type":"text","text":" "},{"text":"but it would be nice to keep the data entered on each device.","type":"text"},{"text":" ","type":"text"},{"text":"An even trickier case arises if two devices are fully synced up, but then the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"cloud data is reset. Effectively, the two data sets are now unrelated, and if you"},{"type":"text","text":" "},{"text":"start them syncing again, the history relating them is lost, and there is no common","type":"text"},{"text":" ","type":"text"},{"text":"ancestor. You can choose one or the other, but just blindly merging the two will","type":"text"},{"type":"text","text":" "},{"text":"lead to duplications (how often have we seen that in apps like Contacts?)","type":"text"}],"variants":[{"paths":["\/documentation\/forked\/mergeable\/salvaging(from:)-9fs2y"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-9fs2y","interfaceLanguage":"swift"},"sections":[],"references":{"doc://Forked/documentation/Forked":{"title":"Forked","type":"topic","kind":"symbol","url":"\/documentation\/forked","abstract":[{"type":"text","text":"A framework for handling shared data with confidence in Swift."}],"role":"collection","identifier":"doc:\/\/Forked\/documentation\/Forked"},"doc://Forked/documentation/Forked/Mergeable/salvaging(from:)-3p5f":{"title":"salvaging(from:)","kind":"symbol","type":"topic","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"salvaging","kind":"identifier"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-3p5f","url":"\/documentation\/forked\/mergeable\/salvaging(from:)-3p5f","role":"symbol"},"doc://Forked/documentation/Forked/Mergeable":{"kind":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable","abstract":[{"type":"text","text":"Any type conforming to this can be used in a 3-way merge"}],"type":"topic","navigatorTitle":[{"text":"Mergeable","kind":"identifier"}],"url":"\/documentation\/forked\/mergeable","title":"Mergeable","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Mergeable","kind":"identifier"}]},"doc://Forked/documentation/Forked/Mergeable/salvaging(from:)-9fs2y":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-9fs2y","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"defaultImplementations":1,"required":true,"title":"salvaging(from:)","type":"topic","url":"\/documentation\/forked\/mergeable\/salvaging(from:)-9fs2y","abstract":[{"type":"text","text":"In general, 3-way merges are used in Forked. But when bootstrapping,"},{"text":" ","type":"text"},{"text":"there can be times when no common ancestor exists. Effectively we have","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to merge together unrelated values. For example, if you install an app on"},{"text":" ","type":"text"},{"text":"two offline devices, insert some data on each, and then take them online to","type":"text"},{"text":" ","type":"text"},{"text":"sync. In this scenario, there is no common ancestor,","type":"text"},{"type":"text","text":" "},{"text":"but it would be nice to keep the data entered on each device.","type":"text"},{"text":" ","type":"text"},{"text":"An even trickier case arises if two devices are fully synced up, but then the","type":"text"},{"type":"text","text":" "},{"text":"cloud data is reset. Effectively, the two data sets are now unrelated, and if you","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"start them syncing again, the history relating them is lost, and there is no common"},{"type":"text","text":" "},{"type":"text","text":"ancestor. You can choose one or the other, but just blindly merging the two will"},{"type":"text","text":" "},{"type":"text","text":"lead to duplications (how often have we seen that in apps like Contacts?)"}]}}}