{"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/Forked\/documentation\/Forked\/Mergeable\/merged(withSubordinate:commonAncestor:)","doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-9fs2y"],"anchor":"Instance-Methods","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/mergeable"]}],"abstract":[{"type":"text","text":"Any type conforming to this can be used in a 3-way merge"}],"metadata":{"externalID":"s:6Forked9MergeableP","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Mergeable","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Mergeable"}],"modules":[{"name":"Forked"}],"title":"Mergeable","roleHeading":"Protocol"},"seeAlsoSections":[{"title":"Essentials","generated":true,"identifiers":["doc:\/\/Forked\/documentation\/Forked\/GettingStarted","doc:\/\/Forked\/documentation\/Forked\/ForkedResource","doc:\/\/Forked\/documentation\/Forked\/Repository"],"anchor":"Essentials"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mergeable"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"}],"platforms":["macOS"],"languages":["swift"]}]}],"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/Forked\/SQ"],"kind":"relationships","type":"inheritsFrom"},{"kind":"relationships","type":"conformingTypes","identifiers":["doc:\/\/Forked\/documentation\/Forked\/Swift\/Optional"],"title":"Conforming Types"}],"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Mergeable","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://Forked/documentation/Forked/Repository":{"url":"\/documentation\/forked\/repository","role":"symbol","navigatorTitle":[{"text":"Repository","kind":"identifier"}],"abstract":[{"text":"This is storage for the ","type":"text"},{"type":"codeVoice","code":"ForkedResource"},{"type":"text","text":". It could"},{"text":" ","type":"text"},{"text":"be persisted on disk, or just kept in memory.","type":"text"},{"text":" ","type":"text"},{"text":"This type does not understand any of the mechanisms of forking","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and merging. That is all handled by the "},{"type":"codeVoice","code":"ForkedResource"},{"type":"text","text":", which also"},{"type":"text","text":" "},{"text":"ensures correct multi-threading behavior.","type":"text"},{"text":" ","type":"text"},{"text":"Classes conforming to this type simply have to setup a storage","type":"text"},{"text":" ","type":"text"},{"text":"mechanism, and handle the requests, keeping commits assigned to forks.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Repository"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Repository","type":"topic","title":"Repository"},"doc://Forked/documentation/Forked/Mergeable":{"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/forked\/mergeable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Mergeable","kind":"identifier"}],"abstract":[{"type":"text","text":"Any type conforming to this can be used in a 3-way merge"}],"navigatorTitle":[{"kind":"identifier","text":"Mergeable"}],"title":"Mergeable","identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable"},"doc://Forked/documentation/Forked/ForkedResource":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource","type":"topic","navigatorTitle":[{"text":"ForkedResource","kind":"identifier"}],"abstract":[{"text":"This manages forks of a resource. It facilitiates concurrent changes to a single resource, and","type":"text"},{"text":" ","type":"text"},{"text":"provides a systematic approach for merging changes, with support for 3-way merging.","type":"text"}],"url":"\/documentation\/forked\/forkedresource","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForkedResource","kind":"identifier"}],"title":"ForkedResource"},"doc://Forked/documentation/Forked/GettingStarted":{"type":"topic","abstract":[{"text":"Learn how to use Forked to manage shared data in your Swift applications.","type":"text"}],"title":"Getting Started with Forked","kind":"article","identifier":"doc:\/\/Forked\/documentation\/Forked\/GettingStarted","role":"article","url":"\/documentation\/forked\/gettingstarted"},"doc://Forked/SQ":{"identifier":"doc:\/\/Forked\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://Forked/documentation/Forked/Mergeable/salvaging(from:)-9fs2y":{"required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"salvaging","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"salvaging(from:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"In general, 3-way merges are used in Forked. But when bootstrapping,"},{"type":"text","text":" "},{"type":"text","text":"there can be times when no common ancestor exists. Effectively we have"},{"text":" ","type":"text"},{"text":"to merge together unrelated values. For example, if you install an app on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"two offline devices, insert some data on each, and then take them online to"},{"type":"text","text":" "},{"type":"text","text":"sync. In this scenario, there is no common ancestor,"},{"text":" ","type":"text"},{"type":"text","text":"but it would be nice to keep the data entered on each device."},{"text":" ","type":"text"},{"text":"An even trickier case arises if two devices are fully synced up, but then the","type":"text"},{"type":"text","text":" "},{"text":"cloud data is reset. Effectively, the two data sets are now unrelated, and if you","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"start them syncing again, the history relating them is lost, and there is no common"},{"text":" ","type":"text"},{"type":"text","text":"ancestor. You can choose one or the other, but just blindly merging the two will"},{"type":"text","text":" "},{"type":"text","text":"lead to duplications (how often have we seen that in apps like Contacts?)"}],"defaultImplementations":1,"type":"topic","url":"\/documentation\/forked\/mergeable\/salvaging(from:)-9fs2y","identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-9fs2y"},"doc://Forked/documentation/Forked/Swift/Optional":{"type":"topic","fragments":[{"kind":"keyword","text":"extension"},{"text":" ","kind":"text"},{"kind":"identifier","preciseIdentifier":"s:Sq","text":"Optional"}],"navigatorTitle":[{"kind":"identifier","text":"Optional"}],"abstract":[],"title":"Optional","kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"code":"Mergeable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/Forked\/documentation\/Forked\/Swift\/Optional","role":"symbol","url":"\/documentation\/forked\/swift\/optional"},"doc://Forked/documentation/Forked":{"url":"\/documentation\/forked","identifier":"doc:\/\/Forked\/documentation\/Forked","kind":"symbol","type":"topic","abstract":[{"text":"A framework for handling shared data with confidence in Swift.","type":"text"}],"title":"Forked","role":"collection"},"doc://Forked/documentation/Forked/Mergeable/merged(withSubordinate:commonAncestor:)":{"required":true,"identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/merged(withSubordinate:commonAncestor:)","role":"symbol","url":"\/documentation\/forked\/mergeable\/merged(withsubordinate:commonancestor:)","type":"topic","title":"merged(withSubordinate:commonAncestor:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"merged"},{"text":"(","kind":"text"},{"text":"withSubordinate","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"commonAncestor","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"Performs a 3-way merge, where ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" and "},{"type":"codeVoice","code":"other"},{"text":" are the most recent versions,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"commonAncestor"},{"text":" is from a point in the past at which time the histories diverged.","type":"text"},{"type":"text","text":" "},{"text":"By comparing the recent values to the ancestor, you can determine what changed in each fork,","type":"text"},{"text":" ","type":"text"},{"text":"and decide how to merge. Where it is not possible to merge changes from each, ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" should"},{"type":"text","text":" "},{"text":"be considered the ","type":"text"},{"code":"dominant","type":"codeVoice"},{"type":"text","text":" fork, and "},{"code":"other","type":"codeVoice"},{"text":" subordinate. If you must choose, choose ","type":"text"},{"code":"self","type":"codeVoice"},{"text":".","type":"text"}]}}}