{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether this sequence and another"},{"text":" ","type":"text"},{"text":"sequence contain equivalent elements in the same order, using the given","type":"text"},{"type":"text","text":" "},{"text":"predicate as the equivalence test.","type":"text"}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/elementsequal(_:by:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","metadata":{"roleHeading":"Instance Method","title":"elementsEqual(_:by:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"elementsEqual","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"OtherSequence"},{"kind":"text","text":">("},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"by"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"externalID":"s:STsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"elementsEqual","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"OtherSequence"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"other","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"by","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"areEquivalent"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":", ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST","text":"Sequence"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"other","content":[{"type":"paragraph","inlineContent":[{"text":"A sequence to compare to this sequence.","type":"text"}]}]},{"name":"areEquivalent","content":[{"type":"paragraph","inlineContent":[{"text":"A predicate that returns ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if its two arguments"},{"text":" ","type":"text"},{"type":"text","text":"are equivalent; otherwise, "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]}]}]},{"content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"true"},{"type":"text","text":" if this sequence and "},{"type":"codeVoice","code":"other"},{"type":"text","text":" contain equivalent items,"},{"type":"text","text":" "},{"type":"text","text":"using "},{"code":"areEquivalent","type":"codeVoice"},{"text":" as the equivalence test; otherwise, ","type":"text"},{"code":"false.","type":"codeVoice"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"At least one of the sequences must be finite."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The predicate must be an ","type":"text"},{"inlineContent":[{"type":"text","text":"equivalence relation"}],"type":"emphasis"},{"text":" over the elements. That","type":"text"},{"text":" ","type":"text"},{"text":"is, for any elements ","type":"text"},{"type":"codeVoice","code":"a"},{"text":", ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"c"},{"type":"text","text":", the following conditions must"},{"text":" ","type":"text"},{"type":"text","text":"hold:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areEquivalent(a, a)"},{"text":" is always ","type":"text"},{"code":"true","type":"codeVoice"},{"text":". (Reflexivity)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"areEquivalent(a, b)"},{"type":"text","text":" implies "},{"code":"areEquivalent(b, a)","type":"codeVoice"},{"type":"text","text":". (Symmetry)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"code":"areEquivalent(a, b)","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"areEquivalent(b, c)"},{"text":" are both ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":", then"},{"type":"text","text":" "},{"type":"codeVoice","code":"areEquivalent(a, c)"},{"text":" is also ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":". (Transitivity)"}],"type":"paragraph"}]}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"m","type":"text"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"type":"text","text":" is the lesser of the length of the"},{"type":"text","text":" "},{"type":"text","text":"sequence and the length of "},{"type":"codeVoice","code":"other"},{"type":"text","text":"."}]}],"name":"Complexity","type":"aside"}]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/elementsEqual(_:by:)","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","abstract":[],"kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","type":"topic","title":"Sequence Implementations","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/elementsEqual(_:by:)":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/elementsEqual(_:by:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether this sequence and another"},{"type":"text","text":" "},{"type":"text","text":"sequence contain equivalent elements in the same order, using the given"},{"type":"text","text":" "},{"type":"text","text":"predicate as the equivalence test."}],"title":"elementsEqual(_:by:)","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/elementsequal(_:by:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"elementsEqual","kind":"identifier"},{"text":"<","kind":"text"},{"text":"OtherSequence","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic","title":"MergeableArray","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","type":"topic","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]}}}