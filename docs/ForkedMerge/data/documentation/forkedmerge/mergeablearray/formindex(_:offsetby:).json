{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:)","interfaceLanguage":"swift"},"sections":[],"metadata":{"symbolKind":"method","roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"formIndex"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"offsetBy"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"title":"formIndex(_:offsetBy:)","role":"symbol","extendedModule":"Swift","externalID":"s:SlsE9formIndex_8offsetByy0B0Qzz_SitF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"formIndex","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"i","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"kind":"text","text":", "},{"kind":"externalParam","text":"offsetBy"},{"text":" ","kind":"text"},{"text":"distance","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":")","kind":"text"}],"platforms":["macOS"]}]},{"parameters":[{"name":"i","content":[{"inlineContent":[{"type":"text","text":"A valid index of the collection."}],"type":"paragraph"}]},{"name":"distance","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The distance to offset "},{"type":"codeVoice","code":"i"},{"type":"text","text":". "},{"code":"distance","type":"codeVoice"},{"type":"text","text":" must not be negative"},{"type":"text","text":" "},{"type":"text","text":"unless the collection conforms to the "},{"type":"codeVoice","code":"BidirectionalCollection"},{"type":"text","text":" "},{"text":"protocol.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"The value passed as "},{"code":"distance","type":"codeVoice"},{"text":" must not offset ","type":"text"},{"type":"codeVoice","code":"i"},{"type":"text","text":" beyond the bounds of"},{"text":" ","type":"text"},{"text":"the collection.","type":"text"}],"type":"paragraph"},{"name":"Complexity","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"O(1) if the collection conforms to","type":"text"},{"text":" ","type":"text"},{"code":"RandomAccessCollection","type":"codeVoice"},{"type":"text","text":"; otherwise, O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"k"}],"type":"emphasis"},{"text":" is the absolute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value of "},{"code":"distance","type":"codeVoice"},{"text":".","type":"text"}]}],"style":"note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Offsets the given index by the specified distance.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:)"]}],"kind":"symbol","references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/formIndex(_:offsetBy:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:)","type":"topic","kind":"symbol","title":"formIndex(_:offsetBy:)","abstract":[{"text":"Offsets the given index by the specified distance.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"formIndex"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Index","preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"offsetBy"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","role":"collectionGroup","title":"Collection Implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"}}}