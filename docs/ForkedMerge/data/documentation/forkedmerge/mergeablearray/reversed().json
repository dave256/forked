{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/reversed()"]}],"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reversed"},{"text":"() -> ","kind":"text"},{"text":"ReversedCollection","preciseIdentifier":"s:s18ReversedCollectionV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"You can reverse a collection without allocating new space for its","type":"text"},{"text":" ","type":"text"},{"text":"elements by calling this ","type":"text"},{"code":"reversed()","type":"codeVoice"},{"text":" method. A ","type":"text"},{"code":"ReversedCollection","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instance wraps an underlying collection and provides access to its"},{"type":"text","text":" "},{"text":"elements in reverse order. This example prints the characters of a","type":"text"},{"text":" ","type":"text"},{"text":"string in reverse order:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let word = \"Backwards\"","for char in word.reversed() {","    print(char, terminator: \"\")","}","\/\/ Prints \"sdrawkcaB\""]},{"inlineContent":[{"text":"If you need a reversed collection of the same type, you may be able to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use the collection’s sequence-based or collection-based initializer. For"},{"text":" ","type":"text"},{"text":"example, to get the reversed version of a string, reverse its","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"characters and initialize a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" instance from the result."}],"type":"paragraph"},{"type":"codeListing","code":["let reversedWord = String(word.reversed())","print(reversedWord)","\/\/ Prints \"sdrawkcaB\""],"syntax":null},{"style":"note","name":"Complexity","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1)"}]}]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Returns a view presenting the elements of the collection in reverse"},{"text":" ","type":"text"},{"type":"text","text":"order."}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"metadata":{"symbolKind":"method","externalID":"s:SKsE8reverseds18ReversedCollectionVyxGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reversed","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"ReversedCollection","kind":"typeIdentifier","preciseIdentifier":"s:s18ReversedCollectionV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","title":"reversed()"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/reversed()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reversed","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"ReversedCollection","preciseIdentifier":"s:s18ReversedCollectionV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/reversed()","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()","kind":"symbol","title":"reversed()","abstract":[{"text":"Returns a view presenting the elements of the collection in reverse","type":"text"},{"text":" ","type":"text"},{"text":"order.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","role":"collectionGroup","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"}}}