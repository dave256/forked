{"metadata":{"role":"symbol","title":"lexicographicallyPrecedes(_:by:)","externalID":"s:STsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Method","symbolKind":"method","extendedModule":"Swift","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"lexicographicallyPrecedes"},{"text":"<","kind":"text"},{"text":"OtherSequence","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"OtherSequence"},{"kind":"text","text":", "},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:by:)"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence precedes another"},{"text":" ","type":"text"},{"type":"text","text":"sequence in a lexicographical (dictionary) ordering, using the given"},{"text":" ","type":"text"},{"text":"predicate to compare elements.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"kind":"text","text":"<"},{"text":"OtherSequence","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"other"},{"text":": ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"by","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"areInIncreasingOrder"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sequence","preciseIdentifier":"s:ST","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":" == ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"}]}]},{"parameters":[{"name":"other","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence to compare to this sequence."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate that returns "},{"type":"codeVoice","code":"true"},{"text":" if its first","type":"text"},{"type":"text","text":" "},{"text":"argument should be ordered before its second argument; otherwise,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]}],"name":"areInIncreasingOrder"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"true"},{"type":"text","text":" if this sequence precedes "},{"type":"codeVoice","code":"other"},{"text":" in a dictionary","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ordering as ordered by "},{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":"; otherwise, "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The predicate must be a "},{"inlineContent":[{"type":"text","text":"strict weak ordering"}],"type":"emphasis"},{"text":" over the elements. That","type":"text"},{"type":"text","text":" "},{"text":"is, for any elements ","type":"text"},{"code":"a","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"b"},{"type":"text","text":", and "},{"type":"codeVoice","code":"c"},{"text":", the following conditions must","type":"text"},{"type":"text","text":" "},{"text":"hold:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder(a, a)"},{"type":"text","text":" is always "},{"code":"false","type":"codeVoice"},{"text":". (Irreflexivity)","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"areInIncreasingOrder(a, b)","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"areInIncreasingOrder(b, c)"},{"text":" are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"both "},{"type":"codeVoice","code":"true"},{"text":", then ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder(a, c)"},{"text":" is also","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":". (Transitive comparability)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Two elements are ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"incomparable"}]},{"type":"text","text":" if neither is ordered before the other"},{"text":" ","type":"text"},{"type":"text","text":"according to the predicate. If "},{"code":"a","type":"codeVoice"},{"type":"text","text":" and "},{"code":"b","type":"codeVoice"},{"type":"text","text":" are incomparable, and "},{"code":"b","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are incomparable, then "},{"code":"a","type":"codeVoice"},{"type":"text","text":" and "},{"code":"c","type":"codeVoice"},{"text":" are also incomparable.","type":"text"},{"text":" ","type":"text"},{"text":"(Transitive incomparability)","type":"text"}],"type":"paragraph"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"This method implements the mathematical notion of lexicographical"},{"type":"text","text":" "},{"type":"text","text":"ordering, which has no connection to Unicode.  If you are sorting"},{"text":" ","type":"text"},{"text":"strings to present to the end user, use ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" APIs that perform"},{"text":" ","type":"text"},{"text":"localized comparison instead.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Note"},{"name":"Complexity","type":"aside","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"type":"text","text":" is the lesser of the length of the"},{"text":" ","type":"text"},{"type":"text","text":"sequence and the length of "},{"code":"other","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"kind":"symbol","identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:by:)","interfaceLanguage":"swift"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lexicographicallyPrecedes(_:by:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lexicographicallyPrecedes"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"OtherSequence"},{"text":">(","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:by:)","type":"topic","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence precedes another"},{"text":" ","type":"text"},{"text":"sequence in a lexicographical (dictionary) ordering, using the given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate to compare elements."}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:by:)","title":"lexicographicallyPrecedes(_:by:)","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","abstract":[],"title":"Sequence Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","role":"collectionGroup","type":"topic","kind":"article"}}}