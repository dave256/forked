{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/prefix(upto:)"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"abstract":[{"text":"Returns a subsequence from the start of the collection up to, but not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including, the specified position."}],"metadata":{"extendedModule":"Swift","roleHeading":"Instance Method","externalID":"s:SlsE6prefix4upTo11SubSequenceQz5IndexQz_tF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"symbolKind":"method","title":"prefix(upTo:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"prefix"},{"text":"(","kind":"text"},{"text":"upTo","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"}],"role":"symbol"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"prefix","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upTo"},{"kind":"text","text":" "},{"text":"end","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The “past the end” index of the resulting subsequence.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"end"},{"text":" must be a valid index of the collection.","type":"text"}]}],"name":"end"}]},{"content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A subsequence up to, but not including, the "},{"code":"end","type":"codeVoice"},{"text":" position.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"The resulting subsequence "},{"type":"emphasis","inlineContent":[{"type":"text","text":"does not include"}]},{"text":" the element at the position","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"end"},{"text":". The following example searches for the index of the number ","type":"text"},{"type":"codeVoice","code":"40"},{"text":" ","type":"text"},{"text":"in an array of integers, and then prints the prefix of the array up to,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but not including, that index:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60]","if let i = numbers.firstIndex(of: 40) {","    print(numbers.prefix(upTo: i))","}","\/\/ Prints \"[10, 20, 30]\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing the collection’s starting index as the "},{"type":"codeVoice","code":"end"},{"type":"text","text":" parameter results in"},{"type":"text","text":" "},{"type":"text","text":"an empty subsequence."}]},{"code":["print(numbers.prefix(upTo: numbers.startIndex))","\/\/ Prints \"[]\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Using the ","type":"text"},{"type":"codeVoice","code":"prefix(upTo:)"},{"type":"text","text":" method is equivalent to using a partial"},{"text":" ","type":"text"},{"type":"text","text":"half-open range as the collection’s subscript. The subscript notation is"},{"type":"text","text":" "},{"type":"text","text":"preferred over "},{"type":"codeVoice","code":"prefix(upTo:)"},{"type":"text","text":"."}]},{"type":"codeListing","code":["if let i = numbers.firstIndex(of: 40) {","    print(numbers[..<i])","}","\/\/ Prints \"[10, 20, 30]\""],"syntax":null},{"name":"Complexity","style":"note","content":[{"inlineContent":[{"text":"O(1)","type":"text"}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"sections":[],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(upTo:)","interfaceLanguage":"swift"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/prefix(upTo:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/prefix(upto:)","role":"symbol","abstract":[{"type":"text","text":"Returns a subsequence from the start of the collection up to, but not"},{"text":" ","type":"text"},{"text":"including, the specified position.","type":"text"}],"type":"topic","title":"prefix(upTo:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"prefix","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"upTo"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(upTo:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic","title":"MergeableArray","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","type":"topic","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"role":"collectionGroup","abstract":[],"title":"Collection Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","kind":"article","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"}}}