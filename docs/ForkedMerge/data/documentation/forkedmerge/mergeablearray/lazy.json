{"kind":"symbol","abstract":[{"text":"A sequence containing the same elements as this sequence,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but on which some operations, such as "},{"type":"codeVoice","code":"map"},{"text":" and ","type":"text"},{"code":"filter","type":"codeVoice"},{"type":"text","text":", are"},{"type":"text","text":" "},{"type":"text","text":"implemented lazily."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"lazy"},{"kind":"text","text":": "},{"text":"LazySequence","preciseIdentifier":"s:s12LazySequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"> { ","kind":"text"},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"languages":["swift"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/lazy"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lazy"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"sections":[],"metadata":{"symbolKind":"property","extendedModule":"Swift","title":"lazy","externalID":"s:STsE4lazys12LazySequenceVyxGvp::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Property","role":"symbol","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"lazy","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12LazySequenceV","kind":"typeIdentifier","text":"LazySequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","abstract":[],"kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","type":"topic","title":"Sequence Implementations","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic","title":"MergeableArray","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","type":"topic","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lazy":{"abstract":[{"type":"text","text":"A sequence containing the same elements as this sequence,"},{"text":" ","type":"text"},{"text":"but on which some operations, such as ","type":"text"},{"type":"codeVoice","code":"map"},{"text":" and ","type":"text"},{"code":"filter","type":"codeVoice"},{"text":", are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implemented lazily."}],"url":"\/documentation\/forkedmerge\/mergeablearray\/lazy","type":"topic","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lazy","role":"symbol","title":"lazy","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"lazy","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12LazySequenceV","text":"LazySequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]}}}