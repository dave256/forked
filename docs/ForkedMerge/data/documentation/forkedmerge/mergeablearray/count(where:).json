{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"count"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"where","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"predicate"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":" : "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"}]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes each element of the sequence"},{"type":"text","text":" "},{"text":"as its argument and returns a Boolean value indicating whether","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the element should be included in the count."}]}],"name":"predicate"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of elements in the sequence that satisfy the given"},{"text":" ","type":"text"},{"type":"text","text":"predicate."}]}]},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this method to count the number of elements that pass a test."},{"type":"text","text":" "},{"text":"The following example finds the number of names that are fewer than","type":"text"},{"type":"text","text":" "},{"text":"five characters long:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let names = [\"Jacqueline\", \"Ian\", \"Amy\", \"Juan\", \"Soroush\", \"Tiffany\"]","let shortNameCount = names.count(where: { $0.count < 5 })","\/\/ shortNameCount == 3"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To find the number of times a specific element appears in the sequence,"},{"type":"text","text":" "},{"text":"use the equal to operator (","type":"text"},{"type":"codeVoice","code":"=="},{"text":") in the closure to test for a match.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let birds = [\"duck\", \"duck\", \"duck\", \"duck\", \"goose\"]","let duckCount = birds.count(where: { $0 == \"duck\" })","\/\/ duckCount == 4"]},{"type":"paragraph","inlineContent":[{"text":"The sequence must be finite.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"count(where:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"count","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"where"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"role":"symbol","extendedModule":"Swift","externalID":"s:STsE5count5whereSiSb7ElementQzqd__YKXE_tqd__YKs5ErrorRd__lF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"symbolKind":"method","roleHeading":"Instance Method"},"abstract":[{"text":"Returns the number of elements in the sequence that satisfy the given","type":"text"},{"text":" ","type":"text"},{"text":"predicate.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count(where:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/count(where:)"]}],"sections":[],"kind":"symbol","references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","abstract":[],"title":"Sequence Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","role":"collectionGroup","type":"topic","kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/count(where:)":{"type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/count(where:)","kind":"symbol","title":"count(where:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count(where:)","abstract":[{"text":"Returns the number of elements in the sequence that satisfy the given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"count","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"where"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"}}}