{"sections":[],"variants":[{"paths":["\/documentation\/forkedmerge\/propertymerge"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:11ForkedMerge08PropertyB0O","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PropertyMerge","kind":"identifier"}],"modules":[{"name":"ForkedMerge"}],"navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"title":"PropertyMerge","symbolKind":"enum","roleHeading":"Enumeration","role":"symbol"},"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"anchor":"Enumeration-Cases","title":"Enumeration Cases","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge"],"generated":true},{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)"]},{"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PropertyMerge","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}]}],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/SY"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"text":" ","type":"text"},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"code":"Mergeable","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"type":"codeVoice","code":"Merger"},{"text":".","type":"text"}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/setMerge":{"type":"topic","role":"symbol","kind":"symbol","title":"PropertyMerge.setMerge","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"setMerge","kind":"identifier"}],"abstract":[{"type":"text","text":"Will merge sets of values. When there is a conflict, it will handle"},{"type":"text","text":" "},{"type":"text","text":"it using a MergeableSet for each set of changes."}],"url":"\/documentation\/forkedmerge\/propertymerge\/setmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge"},"doc://ForkedMerge/SY":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SY","title":"Swift.RawRepresentable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"type":"text","text":" "},{"text":"Some properties know how to merge themselves; they conform to ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"code":"Merger","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","type":"topic","role":"symbol","kind":"symbol","title":"PropertyMerge","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyMerge","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/propertymerge"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/dictionaryMerge":{"kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"dictionaryMerge","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/propertymerge\/dictionarymerge","title":"PropertyMerge.dictionaryMerge","type":"topic","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","abstract":[{"type":"text","text":"Merges dictionaries. When there is a conflict, it will merge using"},{"text":" ","type":"text"},{"type":"text","text":"a MergeableDictionary for each dictionary. If the value type is"},{"text":" ","type":"text"},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":", the dictionary will be merged recursing into the values."}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/Equatable-Implementations":{"type":"topic","role":"collectionGroup","kind":"article","title":"Equatable Implementations","abstract":[],"url":"\/documentation\/forkedmerge\/propertymerge\/equatable-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/init(rawValue:)":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)","url":"\/documentation\/forkedmerge\/propertymerge\/init(rawvalue:)","title":"init(rawValue:)","abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"text":"rawValue","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayMerge":{"type":"topic","role":"symbol","kind":"symbol","title":"PropertyMerge.arrayMerge","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"arrayMerge","kind":"identifier"}],"abstract":[{"type":"text","text":"Will merge as an array of values. Elements must be Equatable."},{"type":"text","text":" "},{"type":"text","text":"When there is a conflict, it will"},{"text":" ","type":"text"},{"text":"determine the changes made to each version, and merge with an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"algorithm that keeps related changes together (eg editing a word)."},{"text":" ","type":"text"},{"text":"Does not guarantee uniqueness of elements after merge:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"there can be duplicates created, so it is more suitable to value types"},{"type":"text","text":" "},{"text":"like characters in a string. than it is to identifiable types.","type":"text"}],"url":"\/documentation\/forkedmerge\/propertymerge\/arraymerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/textMerge":{"title":"PropertyMerge.textMerge","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"textMerge"}],"abstract":[{"text":"Applies the ","type":"text"},{"code":"array","type":"codeVoice"},{"text":" merge algorithm to the characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is suitable for any type of shared text, which may"},{"text":" ","type":"text"},{"text":"have conflicting edits, like a collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"The variable must be a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge","url":"\/documentation\/forkedmerge\/propertymerge\/textmerge","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayOfIdentifiableMerge":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","url":"\/documentation\/forkedmerge\/propertymerge\/arrayofidentifiablemerge","abstract":[{"type":"text","text":"Will merge as an array of values. Elements must be Equatable and"},{"text":" ","type":"text"},{"text":"Identifiable. It will ensure that there are no duplicated identifiers following","type":"text"},{"text":" ","type":"text"},{"text":"a merge. When there is a conflict, it will","type":"text"},{"text":" ","type":"text"},{"text":"determine the changes made to each version, and merge with an","type":"text"},{"type":"text","text":" "},{"text":"algorithm that keeps related changes together (eg editing a word).","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Guarantees uniqueness of identifiers after merge, but does not"},{"text":" ","type":"text"},{"text":"enforce uniqueness of identifiers through updates made directly to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"property."}],"title":"PropertyMerge.arrayOfIdentifiableMerge","role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"arrayOfIdentifiableMerge","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/mergeableProtocol":{"role":"symbol","abstract":[{"type":"text","text":"The property must be a "},{"code":"Mergeable","type":"codeVoice"},{"text":" type, and will be merged accordingly","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"type":"text","text":"This is the default algorithm if "},{"type":"codeVoice","code":"@Merged"},{"text":" has been applied with no","type":"text"},{"type":"text","text":" "},{"text":"algorithm stated.","type":"text"}],"type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mergeableProtocol"}],"title":"PropertyMerge.mergeableProtocol","url":"\/documentation\/forkedmerge\/propertymerge\/mergeableprotocol","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol"},"doc://ForkedMerge/SH":{"identifier":"doc:\/\/ForkedMerge\/SH","title":"Swift.Hashable","type":"unresolvable"},"doc://ForkedMerge/SQ":{"identifier":"doc:\/\/ForkedMerge\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/RawRepresentable-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/forkedmerge\/propertymerge\/rawrepresentable-implementations","role":"collectionGroup","title":"RawRepresentable Implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations"}}}