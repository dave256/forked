{"schemaVersion":{"minor":3,"major":0,"patch":0},"topicSections":[{"generated":true,"title":"Protocols","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"anchor":"Protocols"},{"title":"Structures","generated":true,"anchor":"Structures","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"]},{"title":"Functions","generated":true,"anchor":"Functions","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx"]},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"],"anchor":"Enumerations","title":"Enumerations","generated":true}],"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"metadata":{"title":"ForkedMerge","modules":[{"name":"ForkedMerge"}],"role":"collection","externalID":"ForkedMerge","symbolKind":"module","roleHeading":"Framework"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/forkedmerge"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","interfaceLanguage":"swift"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"type":"text","text":" "},{"text":"Some properties know how to merge themselves; they conform to ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"code":"Merger","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","type":"topic","role":"symbol","kind":"symbol","title":"PropertyMerge","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyMerge","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/propertymerge"},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","title":"DictionaryMerger","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DictionaryMerger"}],"type":"topic","url":"\/documentation\/forkedmerge\/dictionarymerger","role":"symbol","kind":"symbol","abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy":{"kind":"symbol","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"merge"},{"kind":"text","text":"<"},{"text":"M","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"withMergerType","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":".Type, "},{"text":"dominant","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"subordinate"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"commonAncestor"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","title":"merge(withMergerType:dominant:subordinate:commonAncestor:)","url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-18fwy","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"kind":"symbol","abstract":[{"text":"Merges an array, ensuring that the result has elements with unqiue identifiers.","type":"text"}],"title":"ArrayOfIdentifiableMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger"},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"url":"\/documentation\/forkedmerge\/setmerger","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SetMerger"}],"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"title":"SetMerger","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","navigatorTitle":[{"kind":"identifier","text":"SetMerger"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"url":"\/documentation\/forkedmerge\/mergeablevalue","title":"MergeableValue","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableValue"}],"type":"topic","navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}],"abstract":[{"text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it.","type":"text"},{"type":"text","text":" "},{"text":"This allows the type to automatically merge simply by choosing the value that was written later.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely."},{"text":" ","type":"text"},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"role":"symbol","navigatorTitle":[{"text":"MergeableDictionary","kind":"identifier"}],"title":"MergeableDictionary","abstract":[{"text":"Represents a mergable type for a dictionary of values.","type":"text"},{"text":" ","type":"text"},{"text":"Uses a CRDT algorithm.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","kind":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/mergeabledictionary","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableDictionary"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","title":"MergeableSet","type":"topic","abstract":[{"text":"Observed-Remove Set. Can add and remove like a normal set.","type":"text"},{"type":"text","text":" "},{"text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableSet"}],"url":"\/documentation\/forkedmerge\/mergeableset","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableSet"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"abstract":[],"role":"symbol","title":"TextMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","navigatorTitle":[{"text":"TextMerger","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TextMerger","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/textmerger","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"url":"\/documentation\/forkedmerge\/merger","navigatorTitle":[{"text":"Merger","kind":"identifier"}],"title":"Merger","role":"symbol","abstract":[{"text":"A merger is a type that applies a merging algorithm to merge two values together.","type":"text"},{"type":"text","text":" "},{"text":"The values are typically of a simple type. The algorithm could be anything, from a","type":"text"},{"text":" ","type":"text"},{"text":"simple most recent edit wins, to more advanced CRDT based approaches that use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"diffing against a common ancestor."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Merger"}]},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx":{"type":"topic","role":"symbol","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"merge"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"M"},{"kind":"text","text":">("},{"text":"withMergerType","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"dominant"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":"?, "},{"text":"subordinate","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"commonAncestor"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":"?"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-8vogx","title":"merge(withMergerType:dominant:subordinate:commonAncestor:)"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"navigatorTitle":[{"kind":"identifier","text":"PropertyBacking"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyBacking","kind":"identifier"}],"kind":"symbol","title":"PropertyBacking","role":"symbol","type":"topic","abstract":[{"type":"text","text":"The storage used for a property. These storage types have built in"},{"type":"text","text":" "},{"type":"text","text":"systems for merging. They maintain the information they need (eg history)"},{"type":"text","text":" "},{"text":"to properly merge even if with copies that have conflicting changes.","type":"text"}],"url":"\/documentation\/forkedmerge\/propertybacking"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"navigatorTitle":[{"kind":"identifier","text":"ArrayMerger"}],"abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ArrayMerger","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","kind":"symbol","title":"ArrayMerger","type":"topic","url":"\/documentation\/forkedmerge\/arraymerger","role":"symbol"}}}