{"metadata":{"role":"collection","modules":[{"name":"ForkedMerge"}],"title":"ForkedMerge","externalID":"ForkedMerge","symbolKind":"module","roleHeading":"Framework"},"topicSections":[{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"generated":true,"title":"Protocols","anchor":"Protocols"},{"anchor":"Structures","generated":true,"title":"Structures","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"]},{"anchor":"Functions","title":"Functions","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx"]},{"anchor":"Enumerations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"],"title":"Enumerations","generated":true}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state."}]}],"kind":"content"}],"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"sections":[],"hierarchy":{"paths":[[]]},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge"]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"navigatorTitle":[{"text":"SetMerger","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge\/setmerger","role":"symbol","abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SetMerger"}],"title":"SetMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger"},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy":{"type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-18fwy","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"merge","kind":"identifier"},{"kind":"text","text":"<"},{"text":"M","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"withMergerType"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"dominant"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"},{"text":", ","kind":"text"},{"text":"subordinate","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":", "},{"text":"commonAncestor","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","title":"merge(withMergerType:dominant:subordinate:commonAncestor:)"},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx":{"type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-8vogx","role":"symbol","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"merge","kind":"identifier"},{"text":"<","kind":"text"},{"text":"M","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"withMergerType"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":".Type, "},{"text":"dominant","kind":"externalParam"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"subordinate"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"},{"kind":"text","text":"?, "},{"text":"commonAncestor","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"merge(withMergerType:dominant:subordinate:commonAncestor:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx"},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","type":"topic","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge\/propertymerge","role":"symbol","abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"type":"codeVoice","code":"Merger"},{"type":"text","text":"."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyMerge"}],"title":"PropertyMerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"navigatorTitle":[{"kind":"identifier","text":"Merger"}],"url":"\/documentation\/forkedmerge\/merger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Merger","kind":"identifier"}],"abstract":[{"type":"text","text":"A merger is a type that applies a merging algorithm to merge two values together."},{"text":" ","type":"text"},{"text":"The values are typically of a simple type. The algorithm could be anything, from a","type":"text"},{"type":"text","text":" "},{"text":"simple most recent edit wins, to more advanced CRDT based approaches that use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"diffing against a common ancestor."}],"title":"Merger","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","type":"topic","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableDictionary"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","url":"\/documentation\/forkedmerge\/mergeabledictionary","title":"MergeableDictionary","role":"symbol","type":"topic","abstract":[{"text":"Represents a mergable type for a dictionary of values.","type":"text"},{"type":"text","text":" "},{"text":"Uses a CRDT algorithm.","type":"text"}],"navigatorTitle":[{"text":"MergeableDictionary","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"kind":"symbol","title":"ArrayOfIdentifiableMerger","abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"url":"\/documentation\/forkedmerge\/arraymerger","role":"symbol","title":"ArrayMerger","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ArrayMerger"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayMerger"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableValue"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it."},{"text":" ","type":"text"},{"type":"text","text":"This allows the type to automatically merge simply by choosing the value that was written later."},{"type":"text","text":" "},{"text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"title":"MergeableValue","navigatorTitle":[{"kind":"identifier","text":"MergeableValue"}],"url":"\/documentation\/forkedmerge\/mergeablevalue"},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"url":"\/documentation\/forkedmerge\/dictionarymerger","role":"symbol","title":"DictionaryMerger","kind":"symbol","navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DictionaryMerger"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"navigatorTitle":[{"kind":"identifier","text":"PropertyBacking"}],"url":"\/documentation\/forkedmerge\/propertybacking","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyBacking","kind":"identifier"}],"abstract":[{"type":"text","text":"The storage used for a property. These storage types have built in"},{"text":" ","type":"text"},{"text":"systems for merging. They maintain the information they need (eg history)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to properly merge even if with copies that have conflicting changes."}],"title":"PropertyBacking","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","type":"topic","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic","title":"MergeableArray","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"kind":"symbol","title":"MergeableSet","abstract":[{"type":"text","text":"Observed-Remove Set. Can add and remove like a normal set."},{"text":" ","type":"text"},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"navigatorTitle":[{"text":"MergeableSet","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","type":"topic","url":"\/documentation\/forkedmerge\/mergeableset","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableSet"}]},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"abstract":[],"url":"\/documentation\/forkedmerge\/textmerger","role":"symbol","title":"TextMerger","kind":"symbol","navigatorTitle":[{"text":"TextMerger","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TextMerger"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"}}}